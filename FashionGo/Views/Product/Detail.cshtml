@model FashionGo.Models.Entities.Product
@using FashionGo.Models.Entities
@using System.Web.Configuration

@{
    ViewBag.Title = Html.Raw(string.IsNullOrEmpty(Model.MetaTitle) ? Model.Name : Model.MetaTitle);
    Random rd = new Random();
    ProductCategory category = Model.ProductCategory;
    Layout = "~/Views/Shared/_LayouDetail.cshtml";
}

@section HeaderMetas
{
    <meta name="description" content="@Html.Raw(Model.MetaDescription)" />
    <meta name="keywords" content="@Html.Raw(Model.MetaKeyword)" />
    <meta name="author" content="FashionGo.vn" />
    <meta property="og:url" content="@Request.Url" />
    <meta property="og:type" content="Product" />
    <meta property="og:title" content="@Html.Raw(Model.MetaTitle)" />
    <meta property="og:description" content="@Html.Raw(Model.MetaDescription)" />
    <meta property="og:image" content="@Model.FeaturedImage.ResolveServerUrl()" />
}

<style>
    .selected {
        background-color: #f2533d;
        color: #fff;
    }

    body {
        font-family: Arial;
    }

    .eshop-information {
        padding-top: 200px;
    }
</style>

@if (!string.IsNullOrEmpty(category.Banner))
{
    <!-- top-banner -->
    <div class="t3-sl top-banner">
        <!-- SPOTLIGHT -->
        <div class="t3-spotlight t3-top-banner  row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                <div class="t3-module module " id="Mod140">
                    <div class="module-inner">
                        <div class="module-ct">
                            <div class="custom">
                                <p>
                                    <a href="@Url.RouteUrl("ProductCategory", new { slug = Model.ProductCategory.Name.ToAscii(), id = Model.CatId })" title="@Model.ProductCategory.Name">
                                        <img src="@category.Banner" alt="@category.Name" />
                                    </a>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- SPOTLIGHT -->
    </div>
    <!-- //top-banner -->
}


<div class="wrap-content">
    <div id="system-message-container">
    </div>

    <!-- Microdata for Rich Snippets -->
    <div itemscope="" itemtype="http://schema.org/Product" style="display: none;">
        <span itemprop="brand">FashionGo</span>
        <span itemprop="name">@Model.Name</span>
        <img id="product-img-@Model.Id" itemprop="image" src="@Model.FeaturedImage">
        <span itemprop="description">@Model.Description</span>
        Product #: <span itemprop="mpn">FG-@Model.Id</span>
        @*<span itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating">
                <span itemprop="ratingValue"><img src="FashonPro/components/com_eshop/assets/images/stars-4.png"></span> based on <span itemprop="reviewCount">2</span> reviews
            </span>*@
        <span itemprop="offers" itemscope="" itemtype="http://schema.org/Offer">
            Regular price: $245.99
            <meta itemprop="priceCurrency" content="VND">
            <span itemprop="price">@Html.FormatValue(Model.Price, "{0:0,0}")</span>Đ
            <span itemprop="availability" href="http://schema.org/InStock">99</span>
        </span>
    </div>
    <div class="product-info">
        <div class="row-fluid hidden-lg hidden-sm hidden-md">
            <div class="span12">
                <h1 class="eshop-product-details-title">
                    @Model.Name
                </h1>
            </div>
        </div>
        <div class="row-fluid">
            <div class="span7">
                <div class="image-additional hidden-xs slick-initialized slick-slider slick-vertical">
                    <div class="slick-list draggable" tabindex="0" style="height: 504px;">
                        <div class="slick-track" @*style="opacity: 1; height: 1008px; transform: translate3d(0px, 0px, 0px);"*@>
                            @{
                                var stt = 0;
                                var active = "";
                                var firstImage = "";
                                string[] images = Model.Images.Split(',');
                                foreach (string image in images)
                                {
                                    if (stt == 0)
                                    {
                                        firstImage = image;
                                    }
                                    active = stt < 4 ? "slick-active" : "";
                                    <div class="slick-slide @active" index="@stt" @*style="width: 100px;"*@>
                                        <a class="product-image cboxElement" href="@image">
                                            <img src="@image.Replace("uploads/", "uploads/_thumbs/")">
                                        </a>
                                    </div>
                                    stt = stt + 1;
                                }
                            }
                        </div>
                    </div>
                    <button type="button" data-role="none" class="slick-prev slick-disabled" style="display: inline-block;">Quay lại</button>
                </div>
                <div class="image" id="main-image-area">
                    <a class="product-image cboxElement" href="@firstImage" title="@Model.Name">
                        <img id="product-image-@Model.Id" src="@firstImage" title="@Model.Name" alt="@Model.Name">
                    </a>
                </div>
                <div class="image-additional-horz hidden-lg hidden-sm hidden-md slick-initialized slick-slider">
                    <div class="slick-list draggable" tabindex="0">
                        <div class="slick-track" style="opacity: 1; width: 0px; transform: translate3d(0px, 0px, 0px);">
                            @{
                                stt = 0;
                                foreach (string image in images)
                                {
                                    active = stt < 4 ? "slick-active" : "";
                                    <div class="slick-slide @active" index="@stt" style="width: 0px;">
                                        <a class="product-image cboxElement" href="@image">
                                            <img src="@image.Replace("uploads/images", "uploads/_thumbs/images")">
                                        </a>
                                    </div>
                                    stt = stt + 1;
                                }
                            }
                        </div>
                    </div>
                    <button type="button" data-role="none" class="slick-prev slick-disabled" style="display: inline-block;">Quay lại</button>
                    <button type="button" data-role="none" class="slick-next" style="display: block;">Tiếp theo</button>
                </div>
            </div>
            <div class="span5">
                <div class="row-fluid hidden-xs">
                    <div class="span12">
                        <h1 class=" eshop-product-title" style="font-family: Arial; text-transform: none; font-size: 27px;  color: crimson;letter-spacing:normal; margin-top:0px;">
                            @Model.Name<br />
                        </h1>
                    </div>
                </div>
                <div class="row-fluid">
                    <div class="product-review">
                        <p>
                            @*<img src="FashonPro/components/com_eshop/themes/fashionpro/images/stars-4.png">*@

                            <i class="fa fa-tag" aria-hidden="true"></i>@rd.Next(10)
                            <i class="fa fa-eye" aria-hidden="true" style="padding-left:3px;"></i>@Model.Views| Giảm: @Model.Discount%

                        </p>
                    </div>
                    <div>
                        <div class="product-desc ">
                            <address>
                                <p class="eshop-product-title" style="font-family:Arial; text-transform:none; font-size:16px;">Mã sản phẩm:   <span>QF-@Model.Id</span></p>

                                <p class="eshop-product-title" style="font-family:Arial; text-transform:none; font-size:16px;">Trạng thái:<span class="label label-success">Còn hàng</span></p>
                                <p class="eshop-product-title" style="font-family:Arial; text-transform:none; font-size:16px;">Số lượng: <span> @Model.Amount </span></p>

                                <p class="eshop-product-title" style="font-family:Arial; text-transform:none; font-size:16px;">
                                    Danh sách màu:@foreach (var item in Model.Color)
                                    {
                                        <button class="eshop-product-title btn-sm rounded-circle colorButton rounded-circle " data-color="@item.ColorName" style="font-family: Arial; border: thin; border-radius: inherit; word-break: initial; text-transform: none;  font-weight: 100;">@item.ColorName</button>

                                    }
                                </p>



                                <p class="eshop-product-title" style="font-family:Arial; text-transform:none; font-size:16px;">
                                    Danh sách kích thước: @foreach (var item in Model.Size)
                                    {
                                        <button class="btn-sm rounded-circle sizeButton rounded-circle eshop-product-title" data-size="@item.SizeName" style=" border: thin; border-radius: inherit; text-transform: none; font-family: Arial; font-weight: 100;">@item.SizeName</button>
                                    }
                                </p>

                            </address>
                        </div>
                    </div>
                    <div>
                        <div class="product-price" id="product-price">
                            <h2>
                                <strong>
                                    <span class="eshop-price" style="font-family:Arial;">@Html.FormatValue(Model.PriceAfter, "{0:0,0}")đ</span>
                                    @if (Model.Discount.Value > 0)
                                    {
                                        <span class="eshop-base-price" style="font-family:Arial;">@Html.FormatValue(Model.Price, "{0:0,0}")đ</span>
                                    }
                                </strong>
                                <br>
                            </h2>
                        </div>
                    </div>
                    <div class="row-fluid">
                        <div class="product-cart clearfix">
                            <div class="pull-left no_margin_left">
                                <input type="hidden" name="id" value="@Model.Id">
                                <div class="input-append input-prepend input-group bootstrap-touchspin">
                                    @*<input type="hidden" name="id" value="@Model.Id">*@
                                    <span class="eshop-quantity">
                                        <input type="text" class="eshop-quantity-value" id="quantity_@Model.Id" name="quantity" value="1">
                                        <span class="input-group-btn-vertical">
                                            <a class="btn btn-default button-minus spin-up" id="@Model.Id" data="up"><i class="icon-chevron-up"></i></a>
                                            <a class="btn btn-default button-plus spin-down" id="@Model.Id" data="down"><i class="icon-chevron-down"></i></a>
                                        </span>
                                    </span>
                                </div>
                                <button id="add-to-cart_@Model.Id" class="btn btn-primary add-to-cart" type="button" style="font-family:Arial;">Thêm vào giỏ</button>
                            </div>
                            <div class="pull-left">
                                <p>
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <a class="btn" data-toggle="tooltip" data-original-title="Thêm vào danh sách yêu thích" title="Thêm vào danh sách yêu thích" style="cursor: pointer;" onclick="addToWishList(@Model.Id, '@WebConfigurationManager.AppSettings["SiteUrl"].ToString()')"><i id="icon_heart_@Model.Id" class="icon-heart"></i><span class="text-hide">Thêm vào danh sách yêu thích</span></a>
                                    }
                                    else
                                    {
                                        <a class="btn" data-toggle="tooltip" data-original-title="Thêm vào danh sách yêu thích" title="Thêm vào danh sách yêu thích " style="cursor: pointer;" onclick="alert('Vui lòng đăng nhập')">
                                            <i class="icon-heart"></i><span class="text-hide">Thêm vào danh sách yêu thích</span>
                                        </a>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                    <div>
                        <div class="product-share">
                            <div class="ps_area clearfix">
                                <div class="eshop-product-title">
                                    <p style="font-family:Arial; text-transform:none; font-size:16px;"><i class="fa-brands fa-font-awesome" style="color:orangered;"></i> Mô tả<br />  @Html.Raw(HttpUtility.HtmlDecode(Model.Description))</p>

                                </div>



                            </div>

                        </div>
                    </div>


                </div>
            </div>
        </div>

        <div class="eshop-information">
            <div class="eshop-wrap-desc">
                <p style="font-size:22px; color:orangered; font-family:Arial;">
                    <i class="fa-solid fa-cart-shopping"></i> <span class="title-block">CHI TIẾT SẢN PHẨM</span></h3>
                    <hr style="background-color:black;" />
                    <div class="description" id="description">
                        <div class="eshop-description">
                            @Html.Raw(HttpUtility.HtmlDecode(Model.Detail))
                        </div>
                    </div>
            </div>


            @*<div class="eshop-wrap-reviews">
                    <h3 class="eshop-info-title eshop-reviews"><span class="title-block">Bình luận Facebook</span></h3>
                    <div class="addthis_native_toolbox"></div>
                    <div class="fb-comments" data-href="@HttpContext.Current.Request.Url.AbsoluteUri" data-width="815" data-numposts="5"></div>
                </div>*@
        </div>
    </div>
</div>
<br />
<br />
@Html.Action("_relatedProduct", "Product", new { product = Model })

@section scripts{
    <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5728669d60870d14"></script>

    <script>
        function addToWishList(itemId) {
            var heartIcon = document.getElementById("icon_heart_"+itemId);
            if (heartIcon.style.color === "red") {
                heartIcon.style.color = ""; // Xóa thuộc tính màu để trở về màu mặc định
            } else {
                heartIcon.style.color = "red";
            }

            jQuery.ajax({
                type: "POST", // Hoặc "GET" nếu bạn muốn sử dụng GET request
                url: "/Product/AddToWishList", // Thay thế "ControllerName" và "ActionName" bằng tên controller và action cụ thể
                data: { id: itemId },
                success: function (response) {
                    // Xử lý kết quả trả về sau khi gọi controller thành công
                },
                error: function () {
                    // Xử lý lỗi (nếu có)
                }
            });
        }
    </script>

    <!-- facebook comments -->

    <script type="text/javascript">
        jQuery(document).ready(function ($) {
            $(".product-image").colorbox({
                rel: 'colorbox'
            });

            var mainimage = $('#main-image-area');
            $('.option-image').each(function () {
                $(this).children().each(function () {
                    mainimage.append($(this).clone().removeAttr('class').removeAttr('id').removeAttr('href').addClass($(this).attr('id')).hide().click(function () {
                        $('#' + $(this).attr('class')).click();
                    }));
                });
            });
        });
        var selectedColor = null;
        var selectedSize = null;

        var colorButtons = document.querySelectorAll(".colorButton");
        var sizeButtons = document.querySelectorAll(".sizeButton");

        colorButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                // Bỏ chọn màu trước (nếu đã có màu được chọn)
                if (selectedColor) {
                    selectedColor.classList.remove("selected");
                }

                // Đặt màu được chọn mới
                selectedColor = button;
                selectedColor.classList.add("selected");
            });
        });

        sizeButtons.forEach(function (button) {
            button.addEventListener("click", function () {
                // Bỏ chọn kích thước trước (nếu đã có kích thước được chọn)
                if (selectedSize) {
                    selectedSize.classList.remove("selected");
                }

                // Đặt kích thước được chọn mới
                selectedSize = button;
                selectedSize.classList.add("selected");
            });
        });

    document.addEventListener('DOMContentLoaded', function() {
    // Hàm kiểm tra số lượng mua và xác thực lựa chọn kích thước và màu sắc
    function validatePurchase() {
        var purchaseQuantity = parseInt(document.getElementById('quantity_@Model.Id').value);
        var stockQuantity = @Model.Amount; // Số lượng tồn kho
        var selectedColor = document.querySelector('.colorButton.selected'); // Lựa chọn màu sắc
        var selectedSize = document.querySelector('.sizeButton.selected'); // Lựa chọn kích thước

        // Kiểm tra nếu người dùng chưa chọn màu sắc
        if (!selectedColor) {
            alert('Bạn phải chọn màu sắc.');
            return false;
        }

        // Kiểm tra nếu người dùng chưa chọn kích thước
        if (!selectedSize) {
            alert('Bạn phải chọn kích thước.');
            return false;
        }

        // Kiểm tra nếu số lượng mua vượt quá số lượng tồn kho
        if (purchaseQuantity > stockQuantity) {
            alert('Số lượng mua không thể vượt quá số lượng tồn kho.');
            return false; // Trả về false để ngăn chặn thêm vào giỏ hàng
        }

        return true; // Trả về true nếu tất cả kiểm tra đều hợp lệ
    }

    // Gắn hàm validatePurchase vào sự kiện click của nút 'Thêm vào giỏ'
    var addToCartButton = document.getElementById('add-to-cart_@Model.Id');
    addToCartButton.addEventListener('click', function(event) {
        event.preventDefault(); // Ngăn chặn hành động mặc định của nút
        if (validatePurchase() == true) {
            var purchaseQuantity = parseInt(document.getElementById('quantity_@Model.Id').value);
            var selectedColor = document.querySelector('.colorButton.selected').getAttribute('data-color');
            var selectedSize = document.querySelector('.sizeButton.selected').getAttribute('data-size');

            // Nếu hợp lệ, tiến hành thêm vào giỏ hàng
            console.log(selectedColor, selectedSize);
            const data = {
                id: @Model.Id,
                quantity: purchaseQuantity,
                color: selectedColor,
                size: selectedSize
            };

            // Gửi yêu cầu AJAX
            fetch('/Cart/AddCartInDetail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('Sản phẩm đã được thêm vào giỏ hàng.');
                        // Thực hiện điều hướng nếu cần thiết
                        window.location.reload();
                    } else {
                        alert('Có lỗi xảy ra: ' + data.message);
                    }
                })
                .catch((error) => {
                    console.error('Lỗi khi gửi yêu cầu:', error);
                    alert('Lỗi khi gửi yêu cầu: ' + error.message);
                });
        }
    });

    // Thêm sự kiện để chọn màu sắc và kích thước
    document.querySelectorAll('.colorButton').forEach(button => {
        button.addEventListener('click', function() {
            document.querySelectorAll('.colorButton').forEach(btn => btn.classList.remove('selected'));
            this.classList.add('selected');
        });
    });

    document.querySelectorAll('.sizeButton').forEach(button => {
        button.addEventListener('click', function() {
            document.querySelectorAll('.sizeButton').forEach(btn => btn.classList.remove('selected'));
            this.classList.add('selected');
        });
    });
});


    // Giả sử đây là hàm thêm vào giỏ hàng, bạn cần thay thế nó bằng hàm thực tế của bạn
        function addToCart(productId, quantity, color, size) {
            // Tạo dữ liệu để gửi
            const data = {
                id: productId,
                quantity: quantity,
                color: color,
                size: size
            };

            // Gửi yêu cầu AJAX
            fetch('/Cart/AddCartInDetail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        alert('Sản phẩm đã được thêm vào giỏ hàng.');
                        // Thực hiện điều hướng nếu cần thiết
                        window.location.reload()
                    } else {
                        alert('Có lỗi xảy ra: ' + data.message);
                    }
                })
                .catch((error) => {
                    console.error('Lỗi khi gửi yêu cầu:', error);
                    alert('Lỗi khi gửi yêu cầu: ' + error.message);
                });
        }


    </script>



}
